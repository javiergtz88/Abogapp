package AppLeyes_db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import AppLeyes_db.UserORM;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_ORM.
*/
public class UserORMDao extends AbstractDao<UserORM, Long> {

    public static final String TABLENAME = "USER_ORM";

    /**
     * Properties of entity UserORM.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, Long.class, "user_id", false, "USER_ID");
        public final static Property Nombre = new Property(2, String.class, "nombre", false, "NOMBRE");
        public final static Property Esta_autenticado = new Property(3, Integer.class, "esta_autenticado", false, "ESTA_AUTENTICADO");
        public final static Property Type = new Property(4, Integer.class, "Type", false, "TYPE");
        public final static Property Usuario = new Property(5, String.class, "usuario", false, "USUARIO");
        public final static Property Contrasena = new Property(6, String.class, "contrasena", false, "CONTRASENA");
        public final static Property Token = new Property(7, String.class, "token", false, "TOKEN");
    };


    public UserORMDao(DaoConfig config) {
        super(config);
    }
    
    public UserORMDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_ORM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' INTEGER," + // 1: user_id
                "'NOMBRE' TEXT," + // 2: nombre
                "'ESTA_AUTENTICADO' INTEGER," + // 3: esta_autenticado
                "'TYPE' INTEGER," + // 4: Type
                "'USUARIO' TEXT," + // 5: usuario
                "'CONTRASENA' TEXT," + // 6: contrasena
                "'TOKEN' TEXT);"); // 7: token
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_ORM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserORM entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(3, nombre);
        }
 
        Integer esta_autenticado = entity.getEsta_autenticado();
        if (esta_autenticado != null) {
            stmt.bindLong(4, esta_autenticado);
        }
 
        Integer Type = entity.getType();
        if (Type != null) {
            stmt.bindLong(5, Type);
        }
 
        String usuario = entity.getUsuario();
        if (usuario != null) {
            stmt.bindString(6, usuario);
        }
 
        String contrasena = entity.getContrasena();
        if (contrasena != null) {
            stmt.bindString(7, contrasena);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(8, token);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserORM readEntity(Cursor cursor, int offset) {
        UserORM entity = new UserORM( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nombre
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // esta_autenticado
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // usuario
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contrasena
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // token
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserORM entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNombre(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEsta_autenticado(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUsuario(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContrasena(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setToken(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserORM entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserORM entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
